@page "/jsinterop"

@using System.Diagnostics

@* @inject IJSRuntime JSRuntime *@

<h3>Javasript interop with global javascript</h3>

<hr>

<h4>Example 1. With global javascript method. (Note that the jsInterop.js file is references in the index.html)</h4>

<input type="text" @bind="message" />
<button class="btn btn-primary" @onclick="Alert">Alert Me!</button>

<hr>

<h4>Example 2. With isolated javascript.</h4>

<input type="text" @bind="messageAgain" />
<button class="btn btn-primary" @onclick="AlertAgain">Alert Me isolated!</button>

<hr>

<h4>Example 3. Using the element reference #ref in javascript.</h4>

<div @ref="toggleSectionRef" style="display: none">
    <span>This is a toggled section.</span>
</div>
<button class="btn btn-primary" @onclick="ToggleSection">Toggle!</button>
<button class="btn btn-primary" @onclick="ColorSection">Color!</button>
<button class="btn btn-primary" @onclick="TriggerClickOnFileInput">Trigger click on Fileinput hidden button</button>
<InputFile hidden @ref="inputFileRef" id="inputFileId" accept=".md" />

@code {

    string message = string.Empty;

    string messageAgain = string.Empty;

    [Inject]
    public IJSRuntime? JSRuntime { get; set; }

    private IJSObjectReference? _jsModule;
    protected override async Task OnInitializedAsync()
    {
        if (JSRuntime is not null)
        {
            _jsModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/jsInteropIsolated.js");
        }
    }

    private async Task Alert()
    {
        if (JSRuntime is not null)
        {
            try
            {
                await JSRuntime.InvokeVoidAsync("console.log", message);
                await JSRuntime.InvokeVoidAsync("PopupAlert", message);
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("console.log", ex.Message);
            }
        }
    }

    private async Task AlertAgain()
    {
        if (JSRuntime is not null && _jsModule is not null)
        {
            try
            {
                await JSRuntime.InvokeVoidAsync("console.log", messageAgain);
                await _jsModule.InvokeVoidAsync("PopupAlert", messageAgain);
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("console.log", ex.Message);
            }
        }
    }

    private ElementReference toggleSectionRef { get; set; }

    private async Task ToggleSection()
    {
        if (JSRuntime is not null && _jsModule is not null)
        {
            await _jsModule.InvokeVoidAsync("ToggleSection", toggleSectionRef);
        }

    }

    private async Task ColorSection()
    {
        if (JSRuntime is not null && _jsModule is not null)
        {
            await _jsModule.InvokeVoidAsync("ColorSection", toggleSectionRef, "red");
        }

    }

    ElementReference colorButtonRef;

    private async Task ClickOnElement()
    {
        if (JSRuntime is not null && _jsModule is not null)
        {
            await _jsModule.InvokeVoidAsync("ClickOnElement", colorButtonRef);
        }

    }

    InputFile? inputFileRef;

    // it trigger the click event on an unvisible Blazor button using JS
    private async Task TriggerClickOnFileInput()
    {
        if (JSRuntime is not null && _jsModule is not null
            && inputFileRef is not null
            && inputFileRef.Element is not null)
        {
            try
            {
                await _jsModule.InvokeVoidAsync("ClickOnElement", inputFileRef.Element);
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("console.log", ex.Message);
            }
        }

    }
}
